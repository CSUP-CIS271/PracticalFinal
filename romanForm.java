/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package finalproject;

/**
 *
 * @author Vitor
 */
public class romanForm extends javax.swing.JFrame {

    /**
     * Creates new form romanForm
     */
    public romanForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        textField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        result = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Convert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter the Roman Number:");

        result.setText("Decimal Number");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel1)
                        .addGap(44, 44, 44)
                        .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(result)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(97, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(result)
                .addGap(14, 14, 14)
                .addComponent(jButton1)
                .addGap(108, 108, 108))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        result.setText(romanConvert(textField.getText()));
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(romanForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(romanForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(romanForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(romanForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new romanForm().setVisible(true);
            }
        });
    }

    public static String romanConvert(String roman) {
        int totalDecimal = 0;
        int previousNumber = 0;

        String romanUpper = roman.toUpperCase();
        if (checkroman(romanUpper)) {
            romanUpper = romanUpper + "Z";
            // The Z was use for the program sum the last letter
            for (int x = 0; x < romanUpper.length(); x++) {
                char letter = romanUpper.charAt(x);

                switch (letter) {
                    case 'M':
                        totalDecimal = totalDecimal + decimalLogic(1000, previousNumber);
                        previousNumber = 1000;
                        break;

                    case 'D':
                        totalDecimal = totalDecimal + decimalLogic(500, previousNumber);
                        previousNumber = 500;
                        break;

                    case 'C':
                        totalDecimal = totalDecimal + decimalLogic(100, previousNumber);
                        previousNumber = 100;
                        break;

                    case 'L':
                        totalDecimal = totalDecimal + decimalLogic(50, previousNumber);
                        previousNumber = 50;
                        break;

                    case 'X':
                        totalDecimal = totalDecimal + decimalLogic(10, previousNumber);
                        previousNumber = 10;
                        break;

                    case 'V':
                        totalDecimal = totalDecimal + decimalLogic(5, previousNumber);
                        previousNumber = 5;
                        break;

                    case 'I':
                        totalDecimal = totalDecimal + decimalLogic(1, previousNumber);
                        previousNumber = 1;
                        break;
                    case 'Z':
                        totalDecimal = totalDecimal + decimalLogic(0, previousNumber);

                        break;
                }
            }
            return totalDecimal + "";
        } else {
            return "Roman Number Invalid!";
        }
    }

    public static int decimalLogic(int actualNumber, int previousNumber) {

        if (actualNumber <= previousNumber) {
            return previousNumber;
        } else {
            return -previousNumber;
        }
    }

    public static boolean checkroman(String romanNumber) {
        int M_quant = 0;
        int D_quant = 0;
        int C_quant = 0;
        int L_quant = 0;
        int X_quant = 0;
        int V_quant = 0;
        int I_quant = 0;

        for (int k = 0; k < romanNumber.length(); k++) {

            switch (romanNumber.charAt(k)) {
                case 'M':
                    M_quant++;
                    if (M_quant > 3) {
                        return false;
                    }
                    break;

                case 'D':
                    D_quant++;
                    if (D_quant > 3) {
                        return false;
                    }
                    break;

                case 'C':
                    C_quant++;
                    if (C_quant > 3) {
                        return false;
                    }
                    break;

                case 'L':
                    L_quant++;
                    if (L_quant > 3) {
                        return false;
                    }
                    break;

                case 'X':
                    X_quant++;
                    if (X_quant > 3) {
                        return false;
                    }
                    break;

                case 'V':
                    V_quant++;
                    if (V_quant > 3) {
                        return false;
                    }
                    break;

                case 'I':
                    I_quant++;
                    if (I_quant > 3) {
                        return false;
                    }
                    break;
                default:
                    return false;
            }
        }

        return true;
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel result;
    private javax.swing.JTextField textField;
    // End of variables declaration                   
}

